#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int n, m;
vector<vector<char>> dna;
vector<vector<char>> superDNA;
vector<int> answer;

vector<char> merge(const vector<char>& dna1, const vector<char>& dna2) {
    if (dna1.empty() || dna2.empty()) return {};
    vector<char> merged(m);
    for (int i = 0; i < m; i++) {
        if (dna1[i] == '.')
            merged[i] = dna2[i];
        else if (dna2[i] == '.')
            merged[i] = dna1[i];
        else if (dna1[i] == dna2[i])
            merged[i] = dna1[i];
        else
            return {};
    }
    return merged;
}

void genSuperDNA(int index) {
    int loc = 0, tempIndex = index;
    while (tempIndex % 2 == 0) {
        tempIndex /= 2;
        loc++;
    }
    superDNA[index] = merge(dna[loc], superDNA[index - (1 << loc)]);
}

int genAnswer(int index) {
    if (answer[index] < n + 1) return answer[index];
    
    vector<int> bit1;
    int number1 = 0, number2 = 0, tempIndex = index;
    
    for (int i = 0; i < n; i++) {
        if (tempIndex % 2 == 1) {
            bit1.push_back(i);
            number2 += (1 << i);
        }
        tempIndex /= 2;
    }
    
    vector<int> digit(bit1.size(), 0);
    for (int i = 1; i < (1 << (bit1.size() - 1)); i++) {
        for (size_t j = 0; j < bit1.size(); j++) {
            int temp = (1 << bit1[j]);
            if (digit[j] == 1) {
                digit[j] = 0;
                number1 -= temp;
                number2 += temp;
            } else {
                digit[j] = 1;
                number1 += temp;
                number2 -= temp;
                break;
            }
        }
        int temp = genAnswer(number1) + genAnswer(number2);
        answer[index] = min(answer[index], temp);
    }
    return answer[index];
}

int main() {
    cin >> n >> m;
    dna.resize(n, vector<char>(m));
    superDNA.resize(1 << n, vector<char>());
    superDNA[0] = vector<char>(m, '.');
    answer.resize(1 << n, n + 1);
    answer[0] = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> dna[i][j];
        }
    }
    
    for (int i = 1; i < (1 << n); i++) {
        genSuperDNA(i);
    }
    
    for (int i = 1; i < (1 << n); i++) {
        if (!superDNA[i].empty()) {
            answer[i] = 1;
        } else {
            genAnswer(i);
        }
    }
    
    cout << answer[(1 << n) - 1] << endl;
    return 0;
}
